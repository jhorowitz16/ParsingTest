import re
import datetime


def print_messages(messages, target):
    """
    print messages that were sent by a person (by target letter)
    """
    count = 0
    for message in messages[::-1]:
        if message["sender_name"][0] == target:
            print(message["content"])
            count += 1
    print(count)


def dput(d, key, value=1):
    """
    increment the count of the value at the specific key, or create a new key
    """
    if key in d:
        d[key] += value
    else:
        d[key] = value


def dput_list(d, key, value):
    """
    dput but append value to the end of the list
    """
    if key in d:
        d[key] = d[key] + [value]
    else:
        d[key] = [value]


def filter_msg(msg):
    """
    helper to remove messages that were autogenerated
    return None if autogenerated
    """
    content = msg["content"]
    if content in [
        "You are now connected on Messenger.",
        "You sent an attachment."] or \
        re.match("You sent [0-9|a]{1,2} photos?", content) or \
        re.match("http", content):
        return None
    return msg


def to_time(ms_stamp):
    """
    take a 13 digit timestamp in ms and convert to a date time object
    """
    return datetime.datetime.fromtimestamp(ms_stamp // 1000)

def to_day_shift(ms_stamp):
    """
    get the day which begins at 5:00am PST
    5:00am is the new day
    """
    date = datetime.datetime.fromtimestamp(ms_stamp // 1000)
    shifted_date = date - datetime.timedelta(hours=5)
    return shifted_date

def get_time(msg):
    """
    get the time from a message
    """
    timestamp = msg["timestamp_ms"]
    time = to_time(timestamp)
    return time

def get_sender(msg):
    """
    get the first letter of the sender
    """
    return msg["sender_name"][0]

def test_to_day_shift(messages):
    """
    backup a simple test
    """
    for msg in messages[:1000]:
        timestamp = msg["timestamp_ms"]
        time = utils.get_time(msg)
        print(str(time) + " " + str(utils.to_day_shift(timestamp)))

def date_equal(day1, day2):
    """
    are the two days the same by month and day
    """
    return day1.month == day2.month and day1.day == day2.day
